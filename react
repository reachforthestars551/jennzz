import React, { useState, useEffect } from 'react';

// Reusable RippleButton component for Material Design 3-like interaction
const RippleButton = ({ children, onClick, className, ...props }) => {
  const [ripples, setRipples] = useState([]);

  // Function to create a ripple effect on click
  const createRipple = (event) => {
    const button = event.currentTarget;
    // Calculate ripple size based on the larger dimension of the button
    const size = Math.max(button.offsetWidth, button.offsetHeight);
    // Get button's position relative to the viewport
    const rect = button.getBoundingClientRect();
    // Calculate click position relative to the button, centered
    const x = event.clientX - rect.left - size / 2;
    const y = event.clientY - rect.top - size / 2;

    // Create a new ripple object with a unique key and style
    const newRipple = {
      key: Date.now(), // Unique key for React list rendering
      style: {
        width: size,
        height: size,
        left: x,
        top: y,
      },
    };
    // Add the new ripple to the state
    setRipples((prevRipples) => [...prevRipples, newRipple]);

    // Remove the ripple after its animation completes
    setTimeout(() => {
      setRipples((prevRipples) =>
        prevRipples.filter((ripple) => ripple.key !== newRipple.key)
      );
    }, 600); // Matches the CSS animation duration
  };

  // Handle click event, trigger ripple and then the original onClick
  const handleClick = (event) => {
    createRipple(event);
    onClick && onClick(event);
  };

  return (
    <button
      className={`relative overflow-hidden ${className}`} // Ensure overflow is hidden for ripple
      onClick={handleClick}
      {...props}
    >
      {children}
      {/* Render all active ripples */}
      {ripples.map((ripple) => (
        <span
          key={ripple.key}
          className="absolute bg-white opacity-40 rounded-full animate-ripple pointer-events-none"
          style={ripple.style}
        ></span>
      ))}
      {/* Inline style for ripple animation */}
      <style>{`
        @keyframes ripple {
          from {
            transform: scale(0);
            opacity: 0.4;
          }
          to {
            transform: scale(1.5);
            opacity: 0;
          }
        }
        .animate-ripple {
          animation: ripple 0.6s linear;
        }
      `}</style>
    </button>
  );
};


// Main App component
const App = () => {
  // State to manage which "page" is currently displayed
  const [currentPage, setCurrentPage] = useState('home');
  // State for the Oracle feature: user's input prompt
  const [oraclePrompt, setOraclePrompt] = useState('');
  // State for the Oracle feature: LLM's generated response
  const [oracleResponse, setOracleResponse] = useState('');
  // State for the Oracle feature: loading indicator
  const [isLoading, setIsLoading] = useState(false);

  // Effect to handle initial setup or any global listeners if needed
  useEffect(() => {
    console.log('App loaded and ready for neo-y2k vibes!');
  }, []);

  // Function to call the Gemini API for the Digital Oracle
  const askOracle = async () => {
    if (!oraclePrompt.trim()) {
      setOracleResponse('Please enter a question for the Oracle.');
      return;
    }

    setIsLoading(true);
    setOracleResponse(''); // Clear previous response

    try {
      let chatHistory = [];
      // Construct a prompt that encourages a Y2K-style, slightly cryptic response
      const prompt = `As a Neo-Y2K Digital Oracle, respond to the following query with a short, cryptic, and retro-futuristic message, like an old dial-up prophecy. Keep it under 100 words. Query: "${oraclePrompt}"`;
      chatHistory.push({ role: "user", parts: [{ text: prompt }] });

      const payload = { contents: chatHistory };
      const apiKey = ""; // Leave as empty string for Canvas environment
      const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`;

      const response = await fetch(apiUrl, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(payload)
      });

      const result = await response.json();

      if (result.candidates && result.candidates.length > 0 &&
          result.candidates[0].content && result.candidates[0].content.parts &&
          result.candidates[0].content.parts.length > 0) {
        const text = result.candidates[0].content.parts[0].text;
        setOracleResponse(text);
      } else {
        setOracleResponse('Oracle connection lost. Try again later. ERROR: No valid response from LLM.');
        console.error('Unexpected LLM response structure:', result);
      }
    } catch (error) {
      console.error('Error calling Gemini API:', error);
      setOracleResponse('Oracle is offline. System error: ' + error.message);
    } finally {
      setIsLoading(false);
    }
  };


  // Function to render content based on the current page
  const renderPageContent = () => {
    switch (currentPage) {
      case 'home':
        return (
          <div className="text-center p-8 md:p-16">
            <h1 className="text-5xl md:text-7xl font-bold mb-4 text-pink-500 drop-shadow-[0_0_8px_rgba(236,72,153,0.7)] animate-pulse">
              HEY THERE!
            </h1>
            <p className="text-xl md:text-3xl text-blue-400 mb-8 drop-shadow-[0_0_5px_rgba(96,165,250,0.5)]">
              Welcome to my digital space. üåê
            </p>
            <p className="text-lg md:text-xl text-gray-300 max-w-2xl mx-auto">
              This is where I'm building out my corner of the internet.
              Explore the links below to dive deeper!
            </p>
          </div>
        );
      case 'links':
        return (
          <div className="p-8 md:p-16">
            <h2 className="text-4xl md:text-6xl font-bold mb-8 text-blue-500 drop-shadow-[0_0_8px_rgba(59,130,246,0.7)]">
              MY DIGITAL SPOTS
            </h2>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {/* Example Link Card 1: GitHub */}
              <a
                href="https://github.com/yourusername" // Replace with your actual link
                target="_blank"
                rel="noopener noreferrer"
                className="block p-6 bg-gray-800 rounded-xl border-2 border-pink-600 hover:border-pink-400 transition-all duration-300 shadow-lg hover:shadow-pink-500/40 transform hover:-translate-y-1 flex items-center space-x-4"
              >
                {/* GitHub Icon (inline SVG for simplicity) */}
                <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="text-pink-400">
                  <path d="M9 19c-5 1.5-5-2.5-7-3m14 6v-3.87a3.37 3.37 0 0 0-.94-2.61c3.14-.35 6.44-1.54 6.44-7A5.44 5.44 0 0 0 20 4.77 5.07 5.07 0 0 0 19.91 3c0-.66-2.68-1.33-3.98 1.33A10.68 10.68 0 0 0 12 3c-2.7 0-5.32.73-7 2.27C4.08 4.33 1.33 5 1.33 5a5.44 5.44 0 0 0-1.03 3.78c0 5.42 3.3 6.61 6.44 7A3.37 3.37 0 0 0 9 18.13V22"></path>
                </svg>
                <div>
                  <h3 className="text-2xl font-semibold text-pink-400 mb-2">
                    GitHub
                  </h3>
                  <p className="text-gray-300">
                    Check out my coding projects and contributions.
                  </p>
                </div>
              </a>

              {/* Example Link Card 2: LinkedIn */}
              <a
                href="https://linkedin.com/in/yourusername" // Replace with your actual link
                target="_blank"
                rel="noopener noreferrer"
                className="block p-6 bg-gray-800 rounded-xl border-2 border-blue-600 hover:border-blue-400 transition-all duration-300 shadow-lg hover:shadow-blue-500/40 transform hover:-translate-y-1 flex items-center space-x-4"
              >
                {/* LinkedIn Icon (inline SVG) */}
                <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="text-blue-400">
                  <path d="M16 8a6 6 0 0 1 6 6v7h-4v-7a2 2 0 0 0-2-2 2 2 0 0 0-2 2v7h-4v-7a6 6 0 0 1 6-6z"></path>
                  <rect x="2" y="9" width="4" height="12"></rect>
                  <circle cx="4" cy="4" r="2"></circle>
                </svg>
                <div>
                  <h3 className="text-2xl font-semibold text-blue-400 mb-2">
                    LinkedIn
                  </h3>
                  <p className="text-gray-300">
                    Connect with me professionally.
                  </p>
                </div>
              </a>

              {/* Example Link Card 3: Twitter/X */}
              <a
                href="https://twitter.com/yourusername" // Replace with your actual link
                target="_blank"
                rel="noopener noreferrer"
                className="block p-6 bg-gray-800 rounded-xl border-2 border-pink-600 hover:border-pink-400 transition-all duration-300 shadow-lg hover:shadow-pink-500/40 transform hover:-translate-y-1 flex items-center space-x-4"
              >
                {/* Twitter/X Icon (inline SVG) */}
                <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="text-pink-400">
                  <path d="M22 4s-.7 2.1-2 3.4c1.6 10-9.4 17-19 11.6 11.4 1.2 14.6-7.3 14.6-7.3A4.5 4.5 0 0 0 14 4.5c-.7 1.5-1.7 2.5-3 3.4-3.5 1.7-6.5-1.5-6.5-1.5S9 1.5 10.5 0c1.5 1.5 3.5 2.5 5 3.4 1.5-1.5 2.5-2.5 3.4-3.4 1.5 1.5 2.5 3.5 3.4 5z"></path>
                </svg>
                <div>
                  <h3 className="text-2xl font-semibold text-pink-400 mb-2">
                    Twitter/X
                  </h3>
                  <p className="text-gray-300">
                    My random thoughts and updates.
                  </p>
                </div>
              </a>

              {/* Add more link cards as needed: Blog */}
              <a
                href="https://yourblog.com" // Replace with your actual link
                target="_blank"
                rel="noopener noreferrer"
                className="block p-6 bg-gray-800 rounded-xl border-2 border-blue-600 hover:border-blue-400 transition-all duration-300 shadow-lg hover:shadow-blue-500/40 transform hover:-translate-y-1 flex items-center space-x-4"
              >
                {/* Blog Icon (inline SVG) */}
                <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="text-blue-400">
                  <path d="M19 4H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2V6a2 2 0 0 0-2-2z"></path>
                  <path d="M9 18h6"></path>
                  <path d="M9 14h6"></path>
                  <path d="M9 10h6"></path>
                </svg>
                <div>
                  <h3 className="text-2xl font-semibold text-blue-400 mb-2">
                    My Blog
                  </h3>
                  <p className="text-gray-300">
                    Deep dives into my interests and thoughts.
                  </p>
                </div>
              </a>
            </div>
          </div>
        );
      case 'about':
        return (
          <div className="p-8 md:p-16">
            <h2 className="text-4xl md:text-6xl font-bold mb-8 text-pink-500 drop-shadow-[0_0_8px_rgba(236,72,153,0.7)]">
              ABOUT ME
            </h2>
            <div className="text-gray-300 text-lg md:text-xl leading-relaxed max-w-3xl mx-auto">
              <p className="mb-4">
                Hey! I'm a 26-year-old transgirl navigating life and learning new things every day. I'm based in Moreno Valley, CA, and I'm all about starting fresh and exploring what's next.
              </p>
              <p className="mb-4">
                When I'm not doing that, you can probably find me chilling with some amazing movies like 'Your Name' or 'Spider-Verse,' or getting lost in the vibes of 'V for Vendetta' and 'Bullet Train.' My ears are usually blessed by artists like Porter Robinson, Jai Wolf, The Naked and Famous, and Charli XCX. üéß
              </p>
              <p className="mb-4">
                I'm also diving into music production with FL Studio and my little MIDI keyboard. It's a whole new world! My values? Sustainability and openness are super important to me. Always trying to keep it real and green. ‚ôªÔ∏è
              </p>
              <p className="mb-4">
                I've got a background in sales, hospitality, and coffee ‚Äì basically, I love connecting with people! And yeah, my "big 3" is Gemini, Virgo, Virgo, if you're into that. üòâ
              </p>
              <p>
                This site is a work in progress, just like me! Thanks for stopping by.
              </p>
            </div>
          </div>
        );
      case 'oracle':
        return (
          <div className="p-8 md:p-16 text-center">
            <h2 className="text-4xl md:text-6xl font-bold mb-8 text-pink-500 drop-shadow-[0_0_8px_rgba(236,72,153,0.7)]">
              DIGITAL ORACLE ‚ú®
            </h2>
            <p className="text-lg md:text-xl text-gray-300 mb-6 max-w-2xl mx-auto">
              Ask the Oracle a question and receive a glimpse into the digital unknown.
            </p>
            <div className="flex flex-col items-center space-y-4 max-w-xl mx-auto">
              <textarea
                className="w-full p-4 rounded-lg bg-gray-800 text-white border-2 border-blue-600 focus:outline-none focus:border-blue-400 focus:ring-1 focus:ring-blue-400 resize-none h-32 md:h-40 text-lg"
                placeholder="What does the digital future hold for me?"
                value={oraclePrompt}
                onChange={(e) => setOraclePrompt(e.target.value)}
              ></textarea>
              <RippleButton
                onClick={askOracle}
                className="py-3 px-8 rounded-full text-xl font-bold bg-blue-600 text-white shadow-blue-500/50 shadow-md border border-blue-400 hover:bg-blue-500 transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed"
                disabled={isLoading}
              >
                {isLoading ? 'ACCESSING DATABANKS...' : 'ASK THE ORACLE ‚ú®'}
              </RippleButton>

              {oracleResponse && (
                <div className="mt-8 p-6 bg-gray-800 rounded-xl border-2 border-pink-600 shadow-lg text-gray-200 text-left w-full">
                  <p className="text-pink-400 font-bold mb-2">ORACLE'S RESPONSE:</p>
                  <p className="text-lg leading-relaxed">{oracleResponse}</p>
                </div>
              )}
            </div>
          </div>
        );
      default:
        return null;
    }
  };

  return (
    // Main container with dark background and Inter font
    <div className="min-h-screen bg-gray-950 text-white font-inter flex flex-col items-center justify-center p-4">
      {/* Tailwind CSS CDN for styling */}
      <script src="https://cdn.tailwindcss.com"></script>
      {/* Google Fonts for Inter */}
      <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;700&display=swap" rel="stylesheet" />

      {/* Navigation Bar */}
      <nav className="w-full max-w-4xl bg-gray-900 bg-opacity-70 backdrop-blur-sm rounded-full p-2 mb-8 shadow-xl border-2 border-blue-700 flex justify-center">
        <ul className="flex space-x-4 md:space-x-8">
          <li>
            <RippleButton
              onClick={() => setCurrentPage('home')}
              className={`py-2 px-4 rounded-full text-lg md:text-xl font-semibold transition-all duration-300
                ${currentPage === 'home'
                  ? 'bg-pink-600 text-white shadow-pink-500/50 shadow-md border border-pink-400'
                  : 'text-gray-300 hover:text-pink-400 hover:bg-gray-700 hover:shadow-sm'
                }`}
            >
              HOME
            </RippleButton>
          </li>
          <li>
            <RippleButton
              onClick={() => setCurrentPage('links')}
              className={`py-2 px-4 rounded-full text-lg md:text-xl font-semibold transition-all duration-300
                ${currentPage === 'links'
                  ? 'bg-blue-600 text-white shadow-blue-500/50 shadow-md border border-blue-400'
                  : 'text-gray-300 hover:text-blue-400 hover:bg-gray-700 hover:shadow-sm'
                }`}
            >
              LINKS
            </RippleButton>
          </li>
          <li>
            <RippleButton
              onClick={() => setCurrentPage('about')}
              className={`py-2 px-4 rounded-full text-lg md:text-xl font-semibold transition-all duration-300
                ${currentPage === 'about'
                  ? 'bg-pink-600 text-white shadow-pink-500/50 shadow-md border border-pink-400'
                  : 'text-gray-300 hover:text-pink-400 hover:bg-gray-700 hover:shadow-sm'
                }`}
            >
              ABOUT
            </RippleButton>
          </li>
          <li>
            <RippleButton
              onClick={() => setCurrentPage('oracle')}
              className={`py-2 px-4 rounded-full text-lg md:text-xl font-semibold transition-all duration-300
                ${currentPage === 'oracle'
                  ? 'bg-blue-600 text-white shadow-blue-500/50 shadow-md border border-blue-400'
                  : 'text-gray-300 hover:text-blue-400 hover:bg-gray-700 hover:shadow-sm'
                }`}
            >
              ORACLE
            </RippleButton>
          </li>
        </ul>
      </nav>

      {/* Main Content Area */}
      <main className="w-full max-w-4xl bg-gray-900 bg-opacity-80 backdrop-blur-sm rounded-2xl p-6 md:p-10 shadow-2xl border-2 border-blue-800 relative overflow-hidden">
        {/* Background gradient/pattern for Y2K feel */}
        <div className="absolute inset-0 z-0 opacity-20">
          <div className="absolute top-0 left-0 w-64 h-64 bg-pink-500 rounded-full mix-blend-multiply filter blur-xl opacity-70 animate-blob"></div>
          <div className="absolute top-0 right-0 w-64 h-64 bg-blue-500 rounded-full mix-blend-multiply filter blur-xl opacity-70 animate-blob animation-delay-2000"></div>
          <div className="absolute bottom-0 left-0 w-64 h-64 bg-pink-500 rounded-full mix-blend-multiply filter blur-xl opacity-70 animate-blob animation-delay-4000"></div>
          <div className="absolute bottom-0 right-0 w-64 h-64 bg-blue-500 rounded-full mix-blend-multiply filter blur-xl opacity-70 animate-blob animation-delay-6000"></div>
        </div>

        {/* Content */}
        <div className="relative z-10">
          {renderPageContent()}
        </div>
      </main>

      {/* Footer */}
      <footer className="mt-8 text-gray-500 text-sm">
        <p>&copy; 2025 Your Name. All rights reserved. ‚ú®</p>
      </footer>

      {/* Custom CSS for animations */}
      <style>
        {`
        @keyframes blob {
          0% {
            transform: translate(0, 0) scale(1);
          }
          33% {
            transform: translate(30px, -50px) scale(1.1);
          }
          66% {
            transform: translate(-20px, 20px) scale(0.9);
          }
          100% {
            transform: translate(0, 0) scale(1);
          }
        }

        .animate-blob {
          animation: blob 7s infinite cubic-bezier(0.6, 0.01, 0.3, 0.9);
        }

        .animation-delay-2000 {
          animation-delay: 2s;
        }
        .animation-delay-4000 {
          animation-delay: 4s;
        }
        .animation-delay-6000 {
          animation-delay: 6s;
        }

        @keyframes pulse {
          0%, 100% {
            text-shadow: 0 0 8px rgba(236,72,153,0.7);
          }
          50% {
            text-shadow: 0 0 15px rgba(236,72,153,1);
          }
        }

        .animate-pulse {
          animation: pulse 2s infinite alternate;
        }
        `}
      </style>
    </div>
  );
};

export default App;
